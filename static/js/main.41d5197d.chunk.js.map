{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","process","App","useState","query","setQuery","weather","setWeather","color","setColor","className","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","temp","main","console","log","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","feels_like","humidity","pressure","wind","speed","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iLAEMA,EACCC,mCADDD,EAEC,2CAiGQE,MA9Ff,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA0BJ,mBAAS,OAAnC,mBAAOK,EAAP,KAAcC,EAAd,KAwCA,OACE,qBAAKC,UAAWF,EAAhB,SACE,iCACE,qBAAKE,UAAU,aAAf,SACE,uBACEC,KAAK,OACLD,UAAU,aACVE,YAAY,YACZC,SAAU,SAAAC,GACRT,EAASS,EAAEC,OAAOC,QAEpBA,MAAOZ,EACPa,WAjDK,SAAAC,GAGG,UAAZA,EAAIC,KAGNC,MAAM,GAAD,OAAIpB,EAAJ,qBAAyBI,EAAzB,+BAAqDJ,IACvDqB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJjB,EAAWiB,GACXnB,EAAS,IACT,IAAIoB,EAAOD,EAAOE,KAAKD,KACfD,EAAOlB,QAAQoB,KACnBD,EAAO,GACThB,EAAS,OACA,GAAKgB,EAAO,GACrBhB,EAAS,SACAgB,GAAQ,IACjBhB,EAAS,QAEXkB,QAAQC,IAAIJ,WAgCW,oBAAhBlB,EAAQoB,KACf,gCACE,sBAAKhB,UAAU,eAAf,UACE,sBAAKA,UAAU,WAAf,UAA2BJ,EAAQuB,KAAnC,KAA2CvB,EAAQwB,IAAIC,WACvD,qBAAKrB,UAAU,OAAf,SA/BQ,SAACsB,GACnB,IAGIC,EAFO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAE/DD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EALS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAKzGL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAsBDE,CAAY,IAAIC,WAGzC,sBAAKhC,UAAU,cAAf,UACE,sBAAKA,UAAU,OAAf,UACGiC,KAAKC,MAAMtC,EAAQoB,KAAKD,MAD3B,WAGA,qBAAKf,UAAU,UAAf,SAA0BJ,EAAQA,QAAQ,GAAGoB,UAG/C,sBAAKhB,UAAU,WAAf,UACE,sBAAKA,UAAU,YAAf,wBACciC,KAAKC,MAAMtC,EAAQoB,KAAKmB,YADtC,WAGA,sBAAKnC,UAAU,YAAf,sBACYiC,KAAKC,MAAMtC,EAAQoB,KAAKoB,UADpC,OAGA,sBAAKpC,UAAU,YAAf,0BACgBiC,KAAKC,MAAMtC,EAAQoB,KAAKqB,UADxC,UAGA,sBAAKrC,UAAU,YAAf,wBACeJ,EAAQ0C,KAAKC,MAD5B,eAMD,SCnFEC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB/B,MAAK,YAAkD,IAA/CgC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.41d5197d.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst api = {\n  key: process.env.REACT_APP_API_KEY,\n  base:\"https://api.openweathermap.org/data/2.5/\"\n}\n\nfunction App() {\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState({});\n  const [color, setColor] = useState(\"app\");\n\n\n  const search = evt => {\n\n\n    if (evt.key === \"Enter\") {\n\n\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n        .then(res => res.json())\n        .then(result => {\n          setWeather(result);\n          setQuery('');\n          var temp = result.main.temp\n          var t = result.weather.main\n          if (temp > 30) {\n            setColor(\"hot\")\n          } else if (10 < temp < 30) {\n            setColor(\"clear\")\n          } else if (temp <= 10) {\n            setColor(\"cold\")\n          }\n          console.log(result);\n        });\n    }\n  }\n\n  const dateBuilder = (d) => {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`\n  }\n\n  return (\n    <div className={color}>\n      <main>\n        <div className=\"search-box\">\n          <input\n            type=\"text\"\n            className=\"search-bar\"\n            placeholder=\"Search...\"\n            onChange={e => {\n              setQuery(e.target.value)\n            }}\n            value={query}\n            onKeyPress={search}\n          />\n        </div>\n        {(typeof weather.main != \"undefined\") ? (\n          <div>\n            <div className=\"location-box\">\n              <div className=\"location\">{weather.name}, {weather.sys.country}</div>\n              <div className=\"date\">{dateBuilder(new Date())}</div>\n            </div>\n\n            <div className=\"weather-box\">\n              <div className=\"temp\">\n                {Math.round(weather.main.temp)}°c\n              </div>\n              <div className=\"weather\">{weather.weather[0].main}</div>\n            </div>\n\n            <div className=\"add-info\">\n              <div className=\"info-item\">\n                Feels Like {Math.round(weather.main.feels_like)}°c\n              </div>\n              <div className=\"info-item\">\n                Humidity {Math.round(weather.main.humidity)}%\n              </div>\n              <div className=\"info-item\">\n                Air Pressure {Math.round(weather.main.pressure)} hPa\n              </div>\n              <div className=\"info-item\">\n                Wind Speed {(weather.wind.speed)}m/s\n              </div>\n\n            </div>\n          </div>\n        ) : ('')}\n      </main>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}